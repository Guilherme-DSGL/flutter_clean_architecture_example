// Mocks generated by Mockito 5.3.2 from annotations
// in flutter_clean_architecture_example/test/features/number_trivia/presentation/bloc/number_trivia_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i3;
import 'package:flutter_clean_architecture_example/core/error/failures.dart'
    as _i7;
import 'package:flutter_clean_architecture_example/core/usecase/usecase.dart'
    as _i10;
import 'package:flutter_clean_architecture_example/features/number_trivia/domain/entities/number_trivia.dart'
    as _i8;
import 'package:flutter_clean_architecture_example/features/number_trivia/domain/repositories/get_concrete_number_trivia_repository.dart'
    as _i2;
import 'package:flutter_clean_architecture_example/features/number_trivia/domain/repositories/get_random_number_trivia_repository.dart'
    as _i4;
import 'package:flutter_clean_architecture_example/features/number_trivia/domain/usecases/get_concrete_number_trivia_usecase.dart'
    as _i5;
import 'package:flutter_clean_architecture_example/features/number_trivia/domain/usecases/get_random_number_trivia_usecase.dart'
    as _i9;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetConcreteNumberTriviaRepository_0 extends _i1.SmartFake
    implements _i2.GetConcreteNumberTriviaRepository {
  _FakeGetConcreteNumberTriviaRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetRandomNumberTriviaRepository_2 extends _i1.SmartFake
    implements _i4.GetRandomNumberTriviaRepository {
  _FakeGetRandomNumberTriviaRepository_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetConcreteNumberTriviaUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetConcreteNumberTriviaUsecase extends _i1.Mock
    implements _i5.GetConcreteNumberTriviaUsecase {
  MockGetConcreteNumberTriviaUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetConcreteNumberTriviaRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeGetConcreteNumberTriviaRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.GetConcreteNumberTriviaRepository);
  @override
  _i6.Future<_i3.Either<_i7.Failure, _i8.NumberTriviaEntity>> call(
          int? param) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [param],
        ),
        returnValue:
            _i6.Future<_i3.Either<_i7.Failure, _i8.NumberTriviaEntity>>.value(
                _FakeEither_1<_i7.Failure, _i8.NumberTriviaEntity>(
          this,
          Invocation.method(
            #call,
            [param],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, _i8.NumberTriviaEntity>>);
}

/// A class which mocks [GetRandomNumberTriviaUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetRandomNumberTriviaUsecase extends _i1.Mock
    implements _i9.GetRandomNumberTriviaUsecase {
  MockGetRandomNumberTriviaUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.GetRandomNumberTriviaRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeGetRandomNumberTriviaRepository_2(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i4.GetRandomNumberTriviaRepository);
  @override
  _i6.Future<_i3.Either<_i7.Failure, _i8.NumberTriviaEntity>> call(
          _i10.NoParams? param) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [param],
        ),
        returnValue:
            _i6.Future<_i3.Either<_i7.Failure, _i8.NumberTriviaEntity>>.value(
                _FakeEither_1<_i7.Failure, _i8.NumberTriviaEntity>(
          this,
          Invocation.method(
            #call,
            [param],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, _i8.NumberTriviaEntity>>);
}
